name: Publish iOS packages
description: Publishes already packaged iOS debs
inputs:
  site:
    required: true
    path: Where to publish; set to either “production” or “development”
runs:
  using: composite
  steps:
    - name: Create iOS repo metadata
      run: |
        cd build
        rm -rf ios-repo-config
        mkdir ios-repo-config
        (
          echo "Origin: Cydia/Telco"
          echo "Label: telco"
          echo "Suite: stable"
          echo "Version: 1.0"
          echo "Codename: stable"
          echo "Architectures: iphoneos-arm iphoneos-arm64"
          echo "Components: main"
          echo "Description: Telco for iOS"
        ) > ios-repo-config/distributions
        rm -rf ios-repo
        mkdir -p ios-repo/debs
        cd ios-repo
        (
          echo "Origin: Telco"
          echo "Label: Telco"
          echo "Suite: stable"
          echo "Version: 1.0"
          echo "Codename: ios"
          echo "Architectures: iphoneos-arm iphoneos-arm64"
          echo "Components: main"
          echo "Description: Official Telco Repo"
        ) > Release
        for arch in arm arm64; do
          file=telco_${TELCO_VERSION}_iphoneos-$arch.deb
          cp $GITHUB_WORKSPACE/build/release-assets/$file debs/
          reprepro \
              -Vb . \
              --confdir $GITHUB_WORKSPACE/build/ios-repo-config \
              --ignore=forbiddenchar \
              includedeb \
              stable \
              debs/$file
        done
        (
          for arch in arm arm64; do
            zcat < dists/stable/main/binary-iphoneos-$arch/Packages.gz
          done
        ) > Packages
        gzip -9k Packages
      shell: bash
    - name: Upload iOS package and repo metadata
      run: |
        cd build/ios-repo
        case ${{ inputs.site }} in
          production)
            prefix=
            ;;
          development)
            prefix=/dev
           ;;
          *)
            echo "Invalid repo specified" > /dev/stderr
            exit 1
        esac
        aws s3 sync --delete pool/ s3://build.frida.re${prefix}/pool/
        for file in Release Packages Packages.gz; do
          aws s3 cp $file s3://build.frida.re${prefix}/
        done
        for file in Release Packages Packages.gz; do
          aws s3 cp $file s3://build.frida.re${prefix}/./
        done
        urls_to_invalidate=()
        for file in Release Packages Packages.gz ./Release ./Packages ./Packages.gz; do
          urls_to_invalidate+=("https://build.frida.re${prefix}/${file}")
        done
        cfcli purge ${urls_to_invalidate[@]}
      shell: bash
