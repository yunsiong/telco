name: CI

on: push

env:
  ANDROID_NDK_VERSION: r25b
  NODE_TARGETS_DEFAULT: '12.0.0 16.0.0 18.0.0 20.0.0 21.0.0'
  NODE_TARGETS_FREEBSD: '14.0.0 16.0.0 17.0.1'
  ELECTRON_TARGETS_DEFAULT: '27.0.0'
  ELECTRON_TARGETS_FREEBSD: '16.0.0'

jobs:
  publish-prod:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - package-windows
      - package-windows-sfx
      - package-macos
      - package-linux
      - package-ios
      - package-watchos
      - package-tvos
      - package-android
      - package-freebsd
      - package-qnx
      - package-apple-universal
      - assemble-ios-assets
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Set up environment
        uses: ./.github/actions/setup-linux-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro
          sudo npm install -g cloudflare-cli
      - name: Download release assets
        uses: actions/download-artifact@v3
        with:
          name: release-assets
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for Windows/x86
        uses: actions/download-artifact@v3
        with:
          name: telco-node-windows-x86
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for Windows/x86_64
        uses: actions/download-artifact@v3
        with:
          name: telco-node-windows-x86_64
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for macOS/x86_64
        uses: actions/download-artifact@v3
        with:
          name: telco-node-macos-x86_64
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for macOS/arm64
        uses: actions/download-artifact@v3
        with:
          name: telco-node-macos-arm64
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for Linux/x86
        uses: actions/download-artifact@v3
        with:
          name: telco-node-linux-x86
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for Linux/x86_64
        uses: actions/download-artifact@v3
        with:
          name: telco-node-linux-x86_64
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for Linux/armhf
        uses: actions/download-artifact@v3
        with:
          name: telco-node-linux-armhf
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for Linux/arm64
        uses: actions/download-artifact@v3
        with:
          name: telco-node-linux-arm64
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for FreeBSD/arm64
        uses: actions/download-artifact@v3
        with:
          name: telco-node-freebsd-arm64
          path: build/release-assets/
      - name: Package iOS assets
        uses: ./.github/actions/package-ios-assets
      - name: Package Cirrus CI artifacts
        run: releng/package-cirrus-ci-artifacts.sh ${{ github.sha }}
      - name: Rename release assets
        run: releng/rename-release-assets.sh
      - name: Publish release to GitHub
        uses: softprops/action-gh-release@v1
        with:
          name: "Telco ${{ env.TELCO_VERSION }}"
          body: "See https://telco.re/news/ for details."
          files: build/release-assets/*
      - name: Publish Python bindings to PyPI
        uses: ./.github/actions/publish-python-bindings
        with:
          site: production
          pypi-token: ${{ secrets.PYPI_API_TOKEN }}
          testpypi-token: ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Publish iOS .debs
        uses: ./.github/actions/publish-ios-debs
        with:
          site: production
      - name: Publish Node.js bindings to npm
        run: |
          cd telco-node
          npm version $TELCO_VERSION
          mkdir prebuilds
          cp ../build/release-assets/telco-*-node-*-linux-x64.tar.gz prebuilds/
          npm install
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish telco-gadget-ios to npm
        run: |
          cd releng/modules/telco-gadget-ios
          npm version $TELCO_VERSION
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Trigger magisk-telco CI
        run: |
          curl \
              -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.MAGISK_TELCO_TOKEN }}" \
              https://api.github.com/repos/ViRb3/magisk-telco/dispatches \
              -d '{"event_type":"build"}'

  publish-dev:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - telco-windows
      - telco-macos
      - telco-linux
      - telco-freebsd
      - assemble-ios-assets
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Set up environment
        uses: ./.github/actions/setup-linux-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro
          sudo npm install -g cloudflare-cli
      - name: Package iOS assets
        uses: ./.github/actions/package-ios-assets
      - name: Publish Python bindings to TestPyPI
        uses: ./.github/actions/publish-python-bindings
        with:
          site: development
          pypi-token: ${{ secrets.PYPI_API_TOKEN }}
          testpypi-token: ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Publish iOS .debs
        uses: ./.github/actions/publish-ios-debs
        with:
          site: development

  assemble-ios-assets:
    runs-on: macos-latest
    needs: telco-ios
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-macos-env
        with:
          certificates-p12: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          certificates-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}
          keychain-password: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Download telco-server for iOS/arm64
        uses: actions/download-artifact@v3
        with:
          name: telco-server-ios-arm64
          path: ios-arm64/
      - name: Download telco-server for iOS/arm64e
        uses: actions/download-artifact@v3
        with:
          name: telco-server-ios-arm64e
          path: ios-arm64e/
      - name: Download telco-server for iOS/arm64eoabi
        uses: actions/download-artifact@v3
        with:
          name: telco-server-ios-arm64eoabi
          path: ios-arm64eoabi/
      - name: Create universal telco-server for iOS
        run: |
          for arch in arm64 arm64eoabi arm64e; do
            codesign \
                -f -s "-" --preserve-metadata=entitlements \
                ios-$arch/telco-server
          done
          ./releng/mkfatmacho.py \
              telco-server-ios-universal \
              ios-arm64/telco-server \
              ios-arm64eoabi/telco-server \
              ios-arm64e/telco-server
      - name: Download telco-agent for iOS/arm64
        uses: actions/download-artifact@v3
        with:
          name: telco-agent-ios-arm64
          path: ios-arm64/
      - name: Download telco-agent for iOS/arm64e
        uses: actions/download-artifact@v3
        with:
          name: telco-agent-ios-arm64e
          path: ios-arm64e/
      - name: Create universal telco-agent for iOS
        run: |
          lipo \
              ios-arm64/telco-agent.dylib \
              ios-arm64e/telco-agent.dylib \
              -create -output telco-agent-ios-universal.dylib
          install_name_tool \
              -id TelcoAgent \
              telco-agent-ios-universal.dylib
          codesign \
              -f -s "-" \
              telco-agent-ios-universal.dylib
      - name: Assemble iOS assets
        run: |
          mkdir -p \
              ios-assets/usr/bin \
              ios-assets/usr/lib/telco
          mv telco-server-ios-universal \
              ios-assets/usr/bin/telco-server
          mv telco-agent-ios-universal.dylib \
              ios-assets/usr/lib/telco/telco-agent.dylib
      - name: Upload iOS assets
        uses: actions/upload-artifact@v3
        with:
          name: ios-assets
          path: ios-assets/*
      - name: Tear down environment
        uses: ./.github/actions/teardown-macos-env

  package-apple-universal:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-12
    needs: [telco-macos, telco-ios, telco-watchos, telco-tvos]
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-macos-env
        with:
          certificates-p12: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          certificates-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}
          keychain-password: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Download telco-gadget for macOS/x86_64
        uses: actions/download-artifact@v3
        with:
          name: telco-gadget-macos-x86_64
          path: macos-x86_64/
      - name: Download telco-gadget for macOS/arm64
        uses: actions/download-artifact@v3
        with:
          name: telco-gadget-macos-arm64
          path: macos-arm64/
      - name: Download telco-gadget for macOS/arm64e
        uses: actions/download-artifact@v3
        with:
          name: telco-gadget-macos-arm64e
          path: macos-arm64e/
      - name: Create universal telco-gadget for macOS
        run: |
          lipo \
              macos-x86_64/telco-gadget.dylib \
              macos-arm64/telco-gadget.dylib \
              macos-arm64e/telco-gadget.dylib \
              -create -output telco-gadget-macos-universal.dylib
          install_name_tool \
              -id @executable_path/../Frameworks/TelcoGadget.dylib \
              telco-gadget-macos-universal.dylib
          codesign \
              -f -s "$MACOS_CERTID" \
              telco-gadget-macos-universal.dylib
      - name: Compress universal telco-gadget for macOS
        run: xz -T 0 telco-gadget-macos-universal.dylib
      - name: Upload universal telco-gadget for macOS
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: telco-gadget-macos-universal.dylib.xz
      - name: Download telco-gadget for iOS/arm64
        uses: actions/download-artifact@v3
        with:
          name: telco-gadget-ios-arm64
          path: ios-arm64/
      - name: Download telco-gadget for iOS/arm64e
        uses: actions/download-artifact@v3
        with:
          name: telco-gadget-ios-arm64e
          path: ios-arm64e/
      - name: Create universal telco-gadget for iOS
        run: |
          lipo \
              ios-arm64/telco-gadget.dylib \
              ios-arm64e/telco-gadget.dylib \
              -create -output telco-gadget-ios-universal.dylib
          install_name_tool \
              -id @executable_path/Frameworks/TelcoGadget.dylib \
              telco-gadget-ios-universal.dylib
          codesign \
              -f -s "$IOS_CERTID" \
              telco-gadget-ios-universal.dylib
      - name: Compress universal telco-gadget for iOS
        run: |
          gzip -k telco-gadget-ios-universal.dylib
          xz -T 0 telco-gadget-ios-universal.dylib
      - name: Upload universal telco-gadget for iOS (gz)
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: telco-gadget-ios-universal.dylib.gz
      - name: Upload universal telco-gadget for iOS (xz)
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: telco-gadget-ios-universal.dylib.xz
      - name: Download telco-gadget for iOS/x86_64-simulator
        uses: actions/download-artifact@v3
        with:
          name: telco-gadget-ios-x86_64-simulator
          path: ios-x86_64-simulator/
      - name: Download telco-gadget for iOS/arm64-simulator
        uses: actions/download-artifact@v3
        with:
          name: telco-gadget-ios-arm64-simulator
          path: ios-arm64-simulator/
      - name: Create universal telco-gadget for iOS Simulator
        run: |
          lipo \
              ios-x86_64-simulator/telco-gadget.dylib \
              ios-arm64-simulator/telco-gadget.dylib \
              -create -output telco-gadget-ios-simulator-universal.dylib
          install_name_tool \
              -id @executable_path/Frameworks/TelcoGadget.dylib \
              telco-gadget-ios-simulator-universal.dylib
          codesign \
              -f -s "$IOS_CERTID" \
              telco-gadget-ios-simulator-universal.dylib
      - name: Compress universal telco-gadget for iOS Simulator
        run: xz -T 0 telco-gadget-ios-simulator-universal.dylib
      - name: Upload universal telco-gadget for iOS Simulator
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: telco-gadget-ios-simulator-universal.dylib.xz
      - name: Download telco-gadget for watchOS/arm64
        uses: actions/download-artifact@v3
        with:
          name: telco-gadget-watchos-arm64
          path: watchos-arm64/
      - name: Download telco-gadget for watchOS/arm64-simulator
        uses: actions/download-artifact@v3
        with:
          name: telco-gadget-watchos-arm64-simulator
          path: watchos-arm64-simulator/
      - name: Package telco-gadget for watchOS
        run: |
          for arch in arm64 arm64-simulator; do
            cp watchos-$arch/telco-gadget.dylib telco-gadget-watchos-$arch.dylib
            install_name_tool \
                -id @executable_path/Frameworks/TelcoGadget.dylib \
                telco-gadget-watchos-$arch.dylib
            codesign \
                -f -s "$WATCHOS_CERTID" \
                telco-gadget-watchos-$arch.dylib
            xz -T 0 telco-gadget-watchos-$arch.dylib
          done
      - name: Upload telco-gadget for watchOS/arm64
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: telco-gadget-watchos-arm64.dylib.xz
      - name: Upload telco-gadget for watchOS/arm64-simulator
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: telco-gadget-watchos-arm64-simulator.dylib.xz
      - name: Download telco-gadget for tvOS/arm64
        uses: actions/download-artifact@v3
        with:
          name: telco-gadget-tvos-arm64
          path: tvos-arm64/
      - name: Download telco-gadget for tvOS/arm64-simulator
        uses: actions/download-artifact@v3
        with:
          name: telco-gadget-tvos-arm64-simulator
          path: tvos-arm64-simulator/
      - name: Package telco-gadget for tvOS
        run: |
          for arch in arm64 arm64-simulator; do
            cp tvos-$arch/telco-gadget.dylib telco-gadget-tvos-$arch.dylib
            install_name_tool \
                -id @executable_path/Frameworks/TelcoGadget.dylib \
                telco-gadget-tvos-$arch.dylib
            codesign \
                -f -s "$TVOS_CERTID" \
                telco-gadget-tvos-$arch.dylib
            xz -T 0 telco-gadget-tvos-$arch.dylib
          done
      - name: Upload telco-gadget for tvOS/arm64
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: telco-gadget-tvos-arm64.dylib.xz
      - name: Upload telco-gadget for tvOS/arm64-simulator
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: telco-gadget-tvos-arm64-simulator.dylib.xz
      - name: Tear down environment
        uses: ./.github/actions/teardown-macos-env

  package-windows:
    if: startsWith(github.ref, 'refs/tags/')
    needs: telco-windows
    strategy:
      matrix:
        arch: [x86, x86_64]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Package Gum devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gum-devkit-windows-${{ matrix.arch }}
      - name: Package GumJS devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gumjs-devkit-windows-${{ matrix.arch }}
      - name: Package Core devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-core-devkit-windows-${{ matrix.arch }}
      - name: Package telco-server
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-server-windows-${{ matrix.arch }}
      - name: Package telco-portal
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-portal-windows-${{ matrix.arch }}
      - name: Package telco-gadget
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-gadget-windows-${{ matrix.arch }}
      - name: Package .NET bindings
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-clr-windows-${{ matrix.arch }}
      - name: Package QML bindings
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-qml-windows-${{ matrix.arch }}

  package-windows-sfx:
    if: startsWith(github.ref, 'refs/tags/')
    needs: telco-windows
    strategy:
      matrix:
        arch: [x86, x86_64]
    runs-on: windows-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Package Gum devkit
        uses: ./.github/actions/package-artifact-files-as-sfx
        with:
          name: telco-gum-devkit-windows-${{ matrix.arch }}
      - name: Package GumJS devkit
        uses: ./.github/actions/package-artifact-files-as-sfx
        with:
          name: telco-gumjs-devkit-windows-${{ matrix.arch }}
      - name: Package Core devkit
        uses: ./.github/actions/package-artifact-files-as-sfx
        with:
          name: telco-core-devkit-windows-${{ matrix.arch }}

  package-macos:
    if: startsWith(github.ref, 'refs/tags/')
    needs: telco-macos
    strategy:
      matrix:
        arch: [x86_64, arm64, arm64e]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Package Gum devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gum-devkit-macos-${{ matrix.arch }}
      - name: Package gum-graft
        if: matrix.arch != 'arm64e'
        uses: ./.github/actions/package-artifact-file
        with:
          name: gum-graft-macos-${{ matrix.arch }}
      - name: Package GumJS devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gumjs-devkit-macos-${{ matrix.arch }}
      - name: Package Core devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-core-devkit-macos-${{ matrix.arch }}
      - name: Package telco-server
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-server-macos-${{ matrix.arch }}
      - name: Package telco-portal
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-portal-macos-${{ matrix.arch }}
      - name: Package telco-inject
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-inject-macos-${{ matrix.arch }}
      - name: Package QML bindings
        if: matrix.arch == 'x86_64'
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-qml-macos-${{ matrix.arch }}

  package-linux:
    if: startsWith(github.ref, 'refs/tags/')
    needs: telco-linux
    strategy:
      matrix:
        arch: [x86, x86_64, x86_64-musl, armhf, arm64, arm64-musl, mips, mipsel, mips64, mips64el]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Package Gum devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gum-devkit-linux-${{ matrix.arch }}
      - name: Package GumJS devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gumjs-devkit-linux-${{ matrix.arch }}
      - name: Package Core devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-core-devkit-linux-${{ matrix.arch }}
      - name: Package telco-server
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-server-linux-${{ matrix.arch }}
      - name: Package telco-portal
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-portal-linux-${{ matrix.arch }}
      - name: Package telco-gadget
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-gadget-linux-${{ matrix.arch }}
      - name: Package telco-inject
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-inject-linux-${{ matrix.arch }}
      - name: Package QML bindings
        if: matrix.arch == 'x86_64'
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-qml-linux-${{ matrix.arch }}

  package-ios:
    if: startsWith(github.ref, 'refs/tags/')
    needs: telco-ios
    strategy:
      matrix:
        arch: [arm64, arm64e, arm64eoabi, x86_64-simulator, arm64-simulator]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Package Gum devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gum-devkit-ios-${{ matrix.arch }}
      - name: Package GumJS devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gumjs-devkit-ios-${{ matrix.arch }}
      - name: Package Core devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-core-devkit-ios-${{ matrix.arch }}
      - name: Package telco-portal
        if: ${{ !endsWith(matrix.arch, '-simulator') }}
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-portal-ios-${{ matrix.arch }}

  package-watchos:
    if: startsWith(github.ref, 'refs/tags/')
    needs: telco-watchos
    strategy:
      matrix:
        arch: [arm64, arm64-simulator]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Package Gum devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gum-devkit-watchos-${{ matrix.arch }}
      - name: Package GumJS devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gumjs-devkit-watchos-${{ matrix.arch }}
      - name: Package Core devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-core-devkit-watchos-${{ matrix.arch }}

  package-tvos:
    if: startsWith(github.ref, 'refs/tags/')
    needs: telco-tvos
    strategy:
      matrix:
        arch: [arm64, arm64-simulator]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Package Gum devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gum-devkit-tvos-${{ matrix.arch }}
      - name: Package GumJS devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gumjs-devkit-tvos-${{ matrix.arch }}
      - name: Package Core devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-core-devkit-tvos-${{ matrix.arch }}

  package-android:
    if: startsWith(github.ref, 'refs/tags/')
    needs: telco-android
    strategy:
      matrix:
        arch: [x86, x86_64, arm, arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Package Gum devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gum-devkit-android-${{ matrix.arch }}
      - name: Package GumJS devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gumjs-devkit-android-${{ matrix.arch }}
      - name: Package Core devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-core-devkit-android-${{ matrix.arch }}
      - name: Package telco-server
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-server-android-${{ matrix.arch }}
      - name: Package telco-portal
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-portal-android-${{ matrix.arch }}
      - name: Package telco-gadget
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-gadget-android-${{ matrix.arch }}
      - name: Package telco-inject
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-inject-android-${{ matrix.arch }}

  package-freebsd:
    if: startsWith(github.ref, 'refs/tags/')
    needs: telco-freebsd
    strategy:
      matrix:
        arch: [arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Package Gum devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gum-devkit-freebsd-${{ matrix.arch }}
      - name: Package GumJS devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gumjs-devkit-freebsd-${{ matrix.arch }}
      - name: Package Core devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-core-devkit-freebsd-${{ matrix.arch }}
      - name: Package telco-server
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-server-freebsd-${{ matrix.arch }}
      - name: Package telco-portal
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-portal-freebsd-${{ matrix.arch }}
      - name: Package telco-gadget
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-gadget-freebsd-${{ matrix.arch }}
      - name: Package telco-inject
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-inject-freebsd-${{ matrix.arch }}

  package-qnx:
    if: startsWith(github.ref, 'refs/tags/')
    needs: telco-qnx
    strategy:
      matrix:
        arch: [armeabi]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Package Gum devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gum-devkit-qnx-${{ matrix.arch }}
      - name: Package GumJS devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-gumjs-devkit-qnx-${{ matrix.arch }}
      - name: Package Core devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: telco-core-devkit-qnx-${{ matrix.arch }}
      - name: Package telco-server
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-server-qnx-${{ matrix.arch }}
      - name: Package telco-portal
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-portal-qnx-${{ matrix.arch }}
      - name: Package telco-gadget
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-gadget-qnx-${{ matrix.arch }}
      - name: Package telco-inject
        uses: ./.github/actions/package-artifact-file
        with:
          name: telco-inject-qnx-${{ matrix.arch }}

  telco-windows:
    needs: sdk-windows
    strategy:
      matrix:
        arch: [x86, x86_64]
      fail-fast: false
    runs-on: windows-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Set up Windows environment
        uses: ./.github/actions/setup-windows-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
          architecture: ${{ matrix.arch == 'x86_64' && 'x64' || 'x86' }}
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          arch: ${{ matrix.arch == 'x86_64' && 'win64_msvc2019_64' || 'win32_msvc2019' }}
          cache: true
          setup-python: false
      - name: Set up MSVS environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          vsversion: 2022
          arch: ${{ matrix.arch }}
      - name: Set up MSVS shorthands
        run: |
          $platforms = @{
            x86 = 'Win32'
            x86_64 = 'x64'
          }
          $cpuModes = @{
            x86 = 32
            x86_64 = 64
          }
          $arch = '${{ matrix.arch }}'
          $config = 'Release'
          $platform = $platforms[$arch]
          $cpuMode = $cpuModes[$arch]
          echo "TELCO_SLN_CONFIG=$config|$platform" >> $Env:GITHUB_ENV
          echo "TELCO_VS_HOST=$platform-$config" >> $Env:GITHUB_ENV
          echo "TELCO_CPU_MODE=$cpuMode" >> $Env:GITHUB_ENV
      - name: Prepare prebuilt dependencies
        run: devenv telco.sln /Build $Env:TELCO_SLN_CONFIG /Project telco-deps
      - name: Build Gum library
        run: devenv telco.sln /Build $Env:TELCO_SLN_CONFIG /Project gum-${Env:TELCO_CPU_MODE}
      - name: Build Gum devkit
        run: python releng/devkit.py telco-gum windows-${{ matrix.arch }} build/devkits/gum
      - name: Upload Gum devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gum-devkit-windows-${{ matrix.arch }}
          path: build/devkits/gum/
      - name: Build GumJS library
        run: devenv telco.sln /Build $Env:TELCO_SLN_CONFIG /Project gumjs-${Env:TELCO_CPU_MODE}
      - name: Build GumJS devkit
        run: python releng/devkit.py telco-gumjs windows-${{ matrix.arch }} build/devkits/gumjs
      - name: Upload GumJS devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gumjs-devkit-windows-${{ matrix.arch }}
          path: build/devkits/gumjs/
      - name: Build Core library
        run: devenv telco.sln /Build $Env:TELCO_SLN_CONFIG /Project telco-core
      - name: Build Core devkit
        run: python releng/devkit.py telco-core windows-${{ matrix.arch }} build/devkits/core
      - name: Upload Core devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-core-devkit-windows-${{ matrix.arch }}
          path: build/devkits/core/
      - name: Build telco-server
        run: devenv telco.sln /Build $Env:TELCO_SLN_CONFIG /Project telco-server
      - name: Upload telco-server
        uses: actions/upload-artifact@v3
        with:
          name: telco-server-windows-${{ matrix.arch }}
          path: build/telco-windows/${{ env.TELCO_VS_HOST }}/bin/telco-server.exe
      - name: Build telco-portal
        run: devenv telco.sln /Build $Env:TELCO_SLN_CONFIG /Project telco-portal
      - name: Upload telco-portal
        uses: actions/upload-artifact@v3
        with:
          name: telco-portal-windows-${{ matrix.arch }}
          path: build/telco-windows/${{ env.TELCO_VS_HOST }}/bin/telco-portal.exe
      - name: Build telco-gadget
        run: devenv telco.sln /Build $Env:TELCO_SLN_CONFIG /Project telco-gadget
      - name: Upload telco-gadget
        uses: actions/upload-artifact@v3
        with:
          name: telco-gadget-windows-${{ matrix.arch }}
          path: build/telco-windows/${{ env.TELCO_VS_HOST }}/bin/telco-gadget.dll
      - name: Build Python bindings
        run: |
          devenv telco.sln /Build $Env:TELCO_SLN_CONFIG /Project telco-python
          $Env:TELCO_EXTENSION = "$pwd\build\telco-windows\${Env:TELCO_VS_HOST}\lib\python3.10\site-packages\_telco.pyd"
          cd telco-python
          pip wheel -w ..\build\wheels --no-deps .
      - name: Upload Python bindings
        uses: actions/upload-artifact@v3
        with:
          name: telco-python-windows-${{ matrix.arch }}
          path: build/wheels/telco-*.whl
      - name: Build Node.js bindings
        run: |
          $Env:npm_config_jobs = 'max'
          cd telco-node
          npm version $Env:TELCO_VERSION
          npm install
          $nodeTargets = '${{ env.NODE_TARGETS_DEFAULT }}'.Split(' ')
          $electronTargets = '${{ env.ELECTRON_TARGETS_DEFAULT }}'.Split(' ')
          if ('${{ matrix.arch }}' -eq 'x86') {
            $nodeTargets = $nodeTargets | where { [int]($_.Split('.')[0]) -le 16 }
          }
          npm run prebuild -- -r node $($nodeTargets | % {'-t', $_})
          npm run prebuild -- -r electron $($electronTargets | % {'-t', $_})
      - name: Upload Node.js bindings
        uses: actions/upload-artifact@v3
        with:
          name: telco-node-windows-${{ matrix.arch }}
          path: telco-node/prebuilds/*
      - name: Build .NET bindings
        run: devenv telco.sln /Build $Env:TELCO_SLN_CONFIG /Project telco-clr
      - name: Upload .NET bindings
        uses: actions/upload-artifact@v3
        with:
          name: telco-clr-windows-${{ matrix.arch }}
          path: build/telco-windows/${{ env.TELCO_VS_HOST }}/bin/Telco.dll
      - name: Build QML bindings
        run: |
          cd build/tmp-windows/${Env:TELCO_VS_HOST}
          md telco-qml
          cd telco-qml
          qmake QMAKE_TARGET.arch=${{ matrix.arch }} ../../../../telco-qml
          nmake /f Makefile.Release install
      - name: Upload QML bindings
        uses: actions/upload-artifact@v3
        with:
          name: telco-qml-windows-${{ matrix.arch }}
          path: build/telco-windows/${{ env.TELCO_VS_HOST }}/lib/qt5/qml/

  telco-macos:
    needs: sdk-macos
    strategy:
      matrix:
        arch: [x86_64, arm64, arm64e]
      fail-fast: false
    runs-on: ${{ matrix.arch == 'x86_64' && 'macos-12' || 'macos-12-arm64' }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Set up environment
        uses: ./.github/actions/setup-macos-env
        with:
          certificates-p12: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          certificates-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}
          keychain-password: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Install Qt
        if: matrix.arch == 'x86_64'
        uses: jurplel/install-qt-action@v3
        with:
          cache: true
          setup-python: false
      - name: Build Gum libraries and tools
        run: make build/telco-macos-${{ matrix.arch }}/lib/pkgconfig/telco-gum-1.0.pc
      - name: Build Gum devkit
        run: releng/devkit.py telco-gum macos-${{ matrix.arch }} build/devkits/gum
      - name: Upload Gum devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gum-devkit-macos-${{ matrix.arch }}
          path: build/devkits/gum/
      - name: Upload gum-graft
        if: matrix.arch != 'arm64e'
        uses: actions/upload-artifact@v3
        with:
          name: gum-graft-macos-${{ matrix.arch }}
          path: build/telco-macos-${{ matrix.arch }}/bin/gum-graft
      - name: Build GumJS devkit
        run: releng/devkit.py telco-gumjs macos-${{ matrix.arch }} build/devkits/gumjs
      - name: Upload GumJS devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gumjs-devkit-macos-${{ matrix.arch }}
          path: build/devkits/gumjs/
      - name: Build Core libraries and tools
        run: make build/telco-macos-${{ matrix.arch }}/lib/pkgconfig/telco-core-1.0.pc
      - name: Build Core devkit
        run: releng/devkit.py telco-core macos-${{ matrix.arch }} build/devkits/core
      - name: Upload Core devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-core-devkit-macos-${{ matrix.arch }}
          path: build/devkits/core/
      - name: Upload telco-server
        uses: actions/upload-artifact@v3
        with:
          name: telco-server-macos-${{ matrix.arch }}
          path: build/telco-macos-${{ matrix.arch }}/bin/telco-server
      - name: Upload telco-portal
        uses: actions/upload-artifact@v3
        with:
          name: telco-portal-macos-${{ matrix.arch }}
          path: build/telco-macos-${{ matrix.arch }}/bin/telco-portal
      - name: Upload telco-inject
        uses: actions/upload-artifact@v3
        with:
          name: telco-inject-macos-${{ matrix.arch }}
          path: build/telco-macos-${{ matrix.arch }}/bin/telco-inject
      - name: Upload telco-gadget
        uses: actions/upload-artifact@v3
        with:
          name: telco-gadget-macos-${{ matrix.arch }}
          path: build/telco-macos-${{ matrix.arch }}/lib/telco/telco-gadget.dylib
      - name: Build Swift bindings
        if: matrix.arch != 'arm64e'
        run: |
          cp build/devkits/core/* telco-swift/CTelco/
          cd telco-swift
          xcodebuild -arch ${{ matrix.arch }} -configuration Release
      - name: Package Swift bindings
        if: matrix.arch != 'arm64e'
        run: |
          tar \
              -C telco-swift/build/Release \
              -cf telco-swift.tar \
              Telco.framework \
              Telco.framework.dSYM
      - name: Upload Swift bindings
        if: matrix.arch != 'arm64e'
        uses: actions/upload-artifact@v3
        with:
          name: telco-swift-macos-${{ matrix.arch }}
          path: telco-swift.tar
      - name: Build Python bindings
        run: |
          make build/tmp-macos-${{ matrix.arch }}/telco-python3.10/.telco-stamp PYTHON=python3.10
          export TELCO_EXTENSION=$PWD/build/telco-macos-${{ matrix.arch }}/lib/python3.10/site-packages/_telco.so
          case ${{ matrix.arch }} in
            x86_64)
              platform=macosx-10.9-x86_64
              ;;
            arm64*)
              platform=macosx-11.0-arm64
              ;;
          esac
          export _PYTHON_HOST_PLATFORM=$platform
          cd telco-python
          pip wheel -w ../build/wheels --no-deps .
      - name: Upload Python bindings
        uses: actions/upload-artifact@v3
        with:
          name: telco-python-macos-${{ matrix.arch }}
          path: build/wheels/telco-*.whl
      - name: Build Node.js bindings
        if: matrix.arch != 'arm64e'
        run: |
          rm -rf $TMPDIR/prebuild
          . build/telco-env-macos-${{ matrix.arch }}.rc
          case ${{ matrix.arch }} in
            x86_64)
              gyp_arch=x64
              ;;
            *)
              gyp_arch=${{ matrix.arch }}
              ;;
          esac
          export npm_config_arch=$gyp_arch
          export npm_config_jobs=max
          export prebuild_arch=$gyp_arch
          cd telco-node
          npm version $TELCO_VERSION
          npm install
          for target in ${{ env.NODE_TARGETS_DEFAULT }}; do
            npm run prebuild -- -r node -t $target
          done
          for target in ${{ env.ELECTRON_TARGETS_DEFAULT }}; do
            npm run prebuild -- -r electron -t $target
          done
      - name: Upload Node.js bindings
        if: matrix.arch != 'arm64e'
        uses: actions/upload-artifact@v3
        with:
          name: telco-node-macos-${{ matrix.arch }}
          path: telco-node/prebuilds/*
      - name: Build QML bindings
        if: matrix.arch == 'x86_64'
        run: |
          cd build/tmp-macos-${{ matrix.arch }}
          mkdir telco-qml
          cd telco-qml
          qmake QMAKE_TARGET.arch=${{ matrix.arch }} ../../../telco-qml
          make -j$(nproc) install
      - name: Upload QML bindings
        if: matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v3
        with:
          name: telco-qml-macos-${{ matrix.arch }}
          path: build/telco-macos-${{ matrix.arch }}/lib/qt5/qml/
      - name: Tear down environment
        uses: ./.github/actions/teardown-macos-env

  telco-linux:
    needs: sdk-linux
    strategy:
      matrix:
        arch: [x86, x86_64, x86_64-musl, armhf, arm64, arm64-musl, mips, mipsel, mips64, mips64el]
      fail-fast: false
    runs-on: ubuntu-latest
    container: ghcr.io/telco/x-tools-linux-${{ matrix.arch }}:latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Set up environment
        uses: ./.github/actions/setup-linux-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Set TELCO_CAN_RUN_HOST_BINARIES
        if: ${{ matrix.arch == 'x86' }}
        run: echo "TELCO_CAN_RUN_HOST_BINARIES=yes" >> $GITHUB_ENV
      - name: Configure qemu-user
        if: ${{ !startsWith(matrix.arch, 'x86') }}
        run: echo "TELCO_QEMU_SYSROOT=/opt/x-tools/$XTOOLS_HOST/$XTOOLS_HOST/sysroot" >> $GITHUB_ENV
      - name: Install packages needed for installing Qt
        if: matrix.arch == 'x86_64'
        run: |
          apt-get update
          apt-get install -y sudo
      - name: Install Qt
        if: matrix.arch == 'x86_64'
        uses: jurplel/install-qt-action@v3
        with:
          cache: true
          setup-python: false
      - name: Build Gum libraries and tools
        run: make build/telco_thin-linux-${{ matrix.arch }}/lib/pkgconfig/telco-gum-1.0.pc
      - name: Build Gum devkit
        run: releng/devkit.py -t telco-gum linux-${{ matrix.arch }} build/devkits/gum
      - name: Upload Gum devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gum-devkit-linux-${{ matrix.arch }}
          path: build/devkits/gum/
      - name: Build GumJS devkit
        run: releng/devkit.py -t telco-gumjs linux-${{ matrix.arch }} build/devkits/gumjs
      - name: Upload GumJS devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gumjs-devkit-linux-${{ matrix.arch }}
          path: build/devkits/gumjs/
      - name: Build Core libraries and tools
        run: make build/telco_thin-linux-${{ matrix.arch }}/lib/pkgconfig/telco-core-1.0.pc
      - name: Build Core devkit
        run: releng/devkit.py -t telco-core linux-${{ matrix.arch }} build/devkits/core
      - name: Upload Core devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-core-devkit-linux-${{ matrix.arch }}
          path: build/devkits/core/
      - name: Upload telco-server
        uses: actions/upload-artifact@v3
        with:
          name: telco-server-linux-${{ matrix.arch }}
          path: build/telco-linux-${{ matrix.arch }}/bin/telco-server
      - name: Upload telco-portal
        uses: actions/upload-artifact@v3
        with:
          name: telco-portal-linux-${{ matrix.arch }}
          path: build/telco-linux-${{ matrix.arch }}/bin/telco-portal
      - name: Upload telco-inject
        uses: actions/upload-artifact@v3
        with:
          name: telco-inject-linux-${{ matrix.arch }}
          path: build/telco-linux-${{ matrix.arch }}/bin/telco-inject
      - name: Upload 32-bit telco-gadget
        if: ${{ !contains(matrix.arch, '64') }}
        uses: actions/upload-artifact@v3
        with:
          name: telco-gadget-linux-${{ matrix.arch }}
          path: build/telco-linux-${{ matrix.arch }}/lib/telco/32/telco-gadget.so
      - name: Upload 64-bit telco-gadget
        if: ${{ contains(matrix.arch, '64') }}
        uses: actions/upload-artifact@v3
        with:
          name: telco-gadget-linux-${{ matrix.arch }}
          path: build/telco-linux-${{ matrix.arch }}/lib/telco/64/telco-gadget.so
      - name: Build Python bindings
        run: |
          make build/tmp_thin-linux-${{ matrix.arch }}/telco-python3.10/.telco-stamp \
              PYTHON_NAME=python3.10 \
              PYTHON_INCDIR=/opt/x-tools/$XTOOLS_HOST/$XTOOLS_HOST/sysroot/usr/include/python3.10
          export TELCO_EXTENSION=$PWD/build/telco_thin-linux-${{ matrix.arch }}/lib/python3.10/site-packages/_telco.so
          telco_arch=$(echo "${{ matrix.arch }}" | cut -f1 -d"-")
          case $telco_arch in
            x86)
              py_arch=i686
              ;;
            armhf)
              py_arch=armv7l
              ;;
            arm64)
              py_arch=aarch64
              ;;
            *)
              py_arch=$telco_arch
              ;;
          esac
          case ${{ matrix.arch }} in
            *-musl)
              py_platform=musllinux_1_1_${py_arch}
              ;;
            x86*)
              py_platform=manylinux_2_5_${py_arch}.manylinux1_${py_arch}
              ;;
            arm*|ppc*|s390x)
              py_platform=manylinux_2_17_${py_arch}.manylinux2014_${py_arch}
              ;;
            *)
              py_platform=manylinux_2_5_${py_arch}
              ;;
          esac
          bdist_wheel_py=/usr/lib/python3/dist-packages/wheel/bdist_wheel.py
          sed "s/plat_name = plat_name\\.lower()\\.replace('-', '_')\\.replace('.', '_')/plat_name = plat_name.lower().replace('-', '_')/" \
              $bdist_wheel_py > $bdist_wheel_py.patched
          if cmp -s $bdist_wheel_py $bdist_wheel_py.patched; then
            rm -f $bdist_wheel_py.patched
            echo 'Unable to patch bdist_wheel.py' > /dev/stderr
            exit 1
          else
            mv $bdist_wheel_py.patched $bdist_wheel_py
          fi
          cd telco-python
          export _PYTHON_HOST_PLATFORM=linux-$py_arch
          echo "plat_name = $py_platform" >> setup.cfg
          pip wheel -w ../build/wheels --no-deps .
      - name: Upload Python bindings
        uses: actions/upload-artifact@v3
        with:
          name: telco-python-linux-${{ matrix.arch }}
          path: build/wheels/telco-*.whl
      - name: Build Node.js bindings
        if: ${{ !(startsWith(matrix.arch, 'mips') || endsWith(matrix.arch, '-musl')) }}
        run: |
          telco_arch=$(echo "${{ matrix.arch }}" | cut -f1 -d"-")
          case $telco_arch in
            x86)
              gyp_arch=ia32
              ;;
            x86_64)
              gyp_arch=x64
              ;;
            armhf)
              gyp_arch=arm
              ;;
            *)
              gyp_arch=$telco_arch
              ;;
          esac
          export npm_config_arch=$gyp_arch
          export npm_config_jobs=max
          export prebuild_arch=$gyp_arch
          cd telco-node
          npm version $TELCO_VERSION
          npm install
          for target in ${{ env.NODE_TARGETS_DEFAULT }}; do
            npm run prebuild -- -r node -t $target
          done
          for target in ${{ env.ELECTRON_TARGETS_DEFAULT }}; do
            npm run prebuild -- -r electron -t $target
          done
      - name: Upload Node.js bindings
        if: ${{ !(startsWith(matrix.arch, 'mips') || endsWith(matrix.arch, '-musl')) }}
        uses: actions/upload-artifact@v3
        with:
          name: telco-node-linux-${{ matrix.arch }}
          path: telco-node/prebuilds/*
      - name: Build QML bindings
        if: matrix.arch == 'x86_64'
        run: |
          cd build/tmp_thin-linux-${{ matrix.arch }}
          mkdir telco-qml
          cd telco-qml
          qmake QMAKE_TARGET.arch=${{ matrix.arch }} ../../../telco-qml
          make -j$(nproc) install
      - name: Upload QML bindings
        if: matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v3
        with:
          name: telco-qml-linux-${{ matrix.arch }}
          path: build/telco-linux-${{ matrix.arch }}/lib/qt5/qml/

  telco-ios:
    needs: sdk-ios
    strategy:
      matrix:
        arch: [arm64, arm64e, arm64eoabi, x86_64-simulator, arm64-simulator]
      fail-fast: false
    runs-on: macos-11
    env:
      XCODE11: /Applications/Xcode_11.7.app
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Set up environment
        uses: ./.github/actions/setup-macos-env
        with:
          certificates-p12: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          certificates-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}
          keychain-password: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Build Gum libraries and tools
        run: make build/telco-ios-${{ matrix.arch }}/usr/lib/pkgconfig/telco-gum-1.0.pc
      - name: Build Gum devkit
        run: releng/devkit.py telco-gum ios-${{ matrix.arch }} build/devkits/gum
      - name: Upload Gum devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gum-devkit-ios-${{ matrix.arch }}
          path: build/devkits/gum/
      - name: Build GumJS devkit
        run: releng/devkit.py telco-gumjs ios-${{ matrix.arch }} build/devkits/gumjs
      - name: Upload GumJS devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gumjs-devkit-ios-${{ matrix.arch }}
          path: build/devkits/gumjs/
      - name: Build Core libraries and tools
        run: make build/telco-ios-${{ matrix.arch }}/usr/lib/pkgconfig/telco-core-1.0.pc
      - name: Build Core devkit
        run: releng/devkit.py telco-core ios-${{ matrix.arch }} build/devkits/core
      - name: Upload Core devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-core-devkit-ios-${{ matrix.arch }}
          path: build/devkits/core/
      - name: Upload telco-server
        if: ${{ !endsWith(matrix.arch, '-simulator') }}
        uses: actions/upload-artifact@v3
        with:
          name: telco-server-ios-${{ matrix.arch }}
          path: build/telco-ios-${{ matrix.arch }}/usr/bin/telco-server
      - name: Upload telco-portal
        if: ${{ !endsWith(matrix.arch, '-simulator') }}
        uses: actions/upload-artifact@v3
        with:
          name: telco-portal-ios-${{ matrix.arch }}
          path: build/telco-ios-${{ matrix.arch }}/usr/bin/telco-portal
      - name: Upload telco-inject
        if: ${{ !endsWith(matrix.arch, '-simulator') }}
        uses: actions/upload-artifact@v3
        with:
          name: telco-inject-ios-${{ matrix.arch }}
          path: build/telco-ios-${{ matrix.arch }}/usr/bin/telco-inject
      - name: Upload telco-agent
        if: ${{ !endsWith(matrix.arch, '-simulator') }}
        uses: actions/upload-artifact@v3
        with:
          name: telco-agent-ios-${{ matrix.arch }}
          path: build/telco-ios-${{ matrix.arch }}/usr/lib/telco/telco-agent.dylib
      - name: Upload telco-gadget
        uses: actions/upload-artifact@v3
        with:
          name: telco-gadget-ios-${{ matrix.arch }}
          path: build/telco-ios-${{ matrix.arch }}/usr/lib/telco/telco-gadget.dylib
      - name: Tear down environment
        uses: ./.github/actions/teardown-macos-env

  telco-watchos:
    needs: sdk-watchos
    strategy:
      matrix:
        arch: [arm64, arm64-simulator]
      fail-fast: false
    runs-on: macos-12
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Set up environment
        uses: ./.github/actions/setup-macos-env
        with:
          certificates-p12: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          certificates-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}
          keychain-password: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Build Gum libraries and tools
        run: make build/telco_thin-watchos-${{ matrix.arch }}/lib/pkgconfig/telco-gum-1.0.pc
      - name: Build Gum devkit
        run: releng/devkit.py -t telco-gum watchos-${{ matrix.arch }} build/devkits/gum
      - name: Upload Gum devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gum-devkit-watchos-${{ matrix.arch }}
          path: build/devkits/gum/
      - name: Build GumJS devkit
        run: releng/devkit.py -t telco-gumjs watchos-${{ matrix.arch }} build/devkits/gumjs
      - name: Upload GumJS devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gumjs-devkit-watchos-${{ matrix.arch }}
          path: build/devkits/gumjs/
      - name: Build Core libraries and tools
        run: make build/telco_thin-watchos-${{ matrix.arch }}/lib/pkgconfig/telco-core-1.0.pc
      - name: Build Core devkit
        run: releng/devkit.py -t telco-core watchos-${{ matrix.arch }} build/devkits/core
      - name: Upload Core devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-core-devkit-watchos-${{ matrix.arch }}
          path: build/devkits/core/
      - name: Upload telco-gadget
        uses: actions/upload-artifact@v3
        with:
          name: telco-gadget-watchos-${{ matrix.arch }}
          path: build/telco_thin-watchos-${{ matrix.arch }}/lib/telco/telco-gadget.dylib
      - name: Tear down environment
        uses: ./.github/actions/teardown-macos-env

  telco-tvos:
    needs: sdk-tvos
    strategy:
      matrix:
        arch: [arm64, arm64-simulator]
      fail-fast: false
    runs-on: macos-12
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Set up environment
        uses: ./.github/actions/setup-macos-env
        with:
          certificates-p12: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          certificates-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}
          keychain-password: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Build Gum libraries and tools
        run: make build/telco_thin-tvos-${{ matrix.arch }}/lib/pkgconfig/telco-gum-1.0.pc
      - name: Build Gum devkit
        run: releng/devkit.py -t telco-gum tvos-${{ matrix.arch }} build/devkits/gum
      - name: Upload Gum devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gum-devkit-tvos-${{ matrix.arch }}
          path: build/devkits/gum/
      - name: Build GumJS devkit
        run: releng/devkit.py -t telco-gumjs tvos-${{ matrix.arch }} build/devkits/gumjs
      - name: Upload GumJS devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gumjs-devkit-tvos-${{ matrix.arch }}
          path: build/devkits/gumjs/
      - name: Build Core libraries and tools
        run: make build/telco_thin-tvos-${{ matrix.arch }}/lib/pkgconfig/telco-core-1.0.pc
      - name: Build Core devkit
        run: releng/devkit.py -t telco-core tvos-${{ matrix.arch }} build/devkits/core
      - name: Upload Core devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-core-devkit-tvos-${{ matrix.arch }}
          path: build/devkits/core/
      - name: Upload telco-gadget
        uses: actions/upload-artifact@v3
        with:
          name: telco-gadget-tvos-${{ matrix.arch }}
          path: build/telco_thin-tvos-${{ matrix.arch }}/lib/telco/telco-gadget.dylib
      - name: Tear down environment
        uses: ./.github/actions/teardown-macos-env

  telco-android:
    needs: [sdk-linux, sdk-android-32, sdk-android-64]
    strategy:
      matrix:
        arch: [x86, x86_64, arm, arm64]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Set up environment
        uses: ./.github/actions/setup-linux-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Set up NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ env.ANDROID_NDK_VERSION }}
          add-to-path: false
      - name: Add ANDROID_NDK_ROOT to environment
        run: echo "ANDROID_NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build Gum libraries and tools
        run: make build/telco-android-${{ matrix.arch }}/lib/pkgconfig/telco-gum-1.0.pc
      - name: Build Gum devkit
        run: releng/devkit.py telco-gum android-${{ matrix.arch }} build/devkits/gum
      - name: Upload Gum devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gum-devkit-android-${{ matrix.arch }}
          path: build/devkits/gum/
      - name: Build GumJS devkit
        run: releng/devkit.py telco-gumjs android-${{ matrix.arch }} build/devkits/gumjs
      - name: Upload GumJS devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gumjs-devkit-android-${{ matrix.arch }}
          path: build/devkits/gumjs/
      - name: Build Core libraries and tools
        run: make build/telco-android-${{ matrix.arch }}/lib/pkgconfig/telco-core-1.0.pc
      - name: Build Core devkit
        run: releng/devkit.py telco-core android-${{ matrix.arch }} build/devkits/core
      - name: Upload Core devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-core-devkit-android-${{ matrix.arch }}
          path: build/devkits/core/
      - name: Upload telco-server
        uses: actions/upload-artifact@v3
        with:
          name: telco-server-android-${{ matrix.arch }}
          path: build/telco-android-${{ matrix.arch }}/bin/telco-server
      - name: Upload telco-portal
        uses: actions/upload-artifact@v3
        with:
          name: telco-portal-android-${{ matrix.arch }}
          path: build/telco-android-${{ matrix.arch }}/bin/telco-portal
      - name: Upload telco-inject
        uses: actions/upload-artifact@v3
        with:
          name: telco-inject-android-${{ matrix.arch }}
          path: build/telco-android-${{ matrix.arch }}/bin/telco-inject
      - name: Upload 32-bit telco-gadget
        if: ${{ !contains(matrix.arch, '64') }}
        uses: actions/upload-artifact@v3
        with:
          name: telco-gadget-android-${{ matrix.arch }}
          path: build/telco-android-${{ matrix.arch }}/lib/telco/32/telco-gadget.so
      - name: Upload 64-bit telco-gadget
        if: ${{ contains(matrix.arch, '64') }}
        uses: actions/upload-artifact@v3
        with:
          name: telco-gadget-android-${{ matrix.arch }}
          path: build/telco-android-${{ matrix.arch }}/lib/telco/64/telco-gadget.so

  telco-freebsd:
    runs-on: [freebsd, arm64]
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Set up environment
        uses: ./.github/actions/setup-freebsd-env
        with:
           aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
           aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
           cloudflare-email: ${{ secrets.CF_EMAIL }}
           cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Roll toolchain
        run: releng/deps.py roll toolchain freebsd-arm64 --activate
      - name: Roll SDK
        run: releng/deps.py roll sdk freebsd-arm64
      - name: Build Gum libraries and tools
        run: make gum
      - name: Build Gum devkit
        run: releng/devkit.py telco-gum freebsd-arm64 build/devkits/gum
      - name: Upload Gum devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gum-devkit-freebsd-arm64
          path: build/devkits/gum/
      - name: Build GumJS devkit
        run: releng/devkit.py telco-gumjs freebsd-arm64 build/devkits/gumjs
      - name: Upload GumJS devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gumjs-devkit-freebsd-arm64
          path: build/devkits/gumjs/
      - name: Test Gum
        run: make check-gum
      - name: Build Core libraries and tools
        run: make core
      - name: Build Core devkit
        run: releng/devkit.py telco-core freebsd-arm64 build/devkits/core
      - name: Upload Core devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-core-devkit-freebsd-arm64
          path: build/devkits/core/
      - name: Upload telco-server
        uses: actions/upload-artifact@v3
        with:
          name: telco-server-freebsd-arm64
          path: build/telco-freebsd-arm64/bin/telco-server
      - name: Upload telco-portal
        uses: actions/upload-artifact@v3
        with:
          name: telco-portal-freebsd-arm64
          path: build/telco-freebsd-arm64/bin/telco-portal
      - name: Upload telco-inject
        uses: actions/upload-artifact@v3
        with:
          name: telco-inject-freebsd-arm64
          path: build/telco-freebsd-arm64/bin/telco-inject
      - name: Upload telco-gadget
        uses: actions/upload-artifact@v3
        with:
          name: telco-gadget-freebsd-arm64
          path: build/telco-freebsd-arm64/lib/telco/64/telco-gadget.so
      - name: Test Core
        run: make check-core
      - name: Build Python bindings
        run: |
          make python
          export TELCO_EXTENSION=$PWD/build/telco-freebsd-arm64/lib/python3.9/site-packages/_telco.so
          cd telco-python
          pip wheel -w ../build/wheels --no-deps .
      - name: Upload Python bindings
        uses: actions/upload-artifact@v3
        with:
          name: telco-python-freebsd-arm64
          path: build/wheels/telco-*.whl
      - name: Build Node.js bindings
        run: |
          export npm_config_jobs=max
          cd telco-node
          npm version $TELCO_VERSION
          npm install
          for target in ${{ env.NODE_TARGETS_FREEBSD }}; do
            npm run prebuild -- -r node -t $target
          done
          for target in ${{ env.ELECTRON_TARGETS_FREEBSD }}; do
            npm run prebuild -- -r electron -t $target
          done
      - name: Upload Node.js bindings
        uses: actions/upload-artifact@v3
        with:
          name: telco-node-freebsd-arm64
          path: telco-node/prebuilds/*

  telco-qnx:
    runs-on: ubuntu-latest
    needs: sdk-linux
    container: ghcr.io/telco/qnx-tools:latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Set up environment
        uses: ./.github/actions/setup-linux-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Roll SDK
        run: releng/deps.py roll sdk qnx-armeabi
      - name: Build Gum libraries and tools
        run: make gum-qnx-armeabi
      - name: Build Gum devkit
        run: releng/devkit.py -t telco-gum qnx-armeabi build/devkits/gum
      - name: Upload Gum devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gum-devkit-qnx-armeabi
          path: build/devkits/gum/
      - name: Build GumJS devkit
        run: releng/devkit.py -t telco-gumjs qnx-armeabi build/devkits/gumjs
      - name: Upload GumJS devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-gumjs-devkit-qnx-armeabi
          path: build/devkits/gumjs/
      - name: Test Gum
        run: |
          tar -C build/tmp_thin-qnx-armeabi/telco-gum/tests -cf /tmp/runner.tar gum-tests data/
          /opt/sabrelite/run.sh /tmp/runner.tar /opt/telco/gum-tests
      - name: Build Core libraries and tools
        run: make core-qnx-armeabi
      - name: Build Core devkit
        run: releng/devkit.py -t telco-core qnx-armeabi build/devkits/core
      - name: Upload Core devkit
        uses: actions/upload-artifact@v3
        with:
          name: telco-core-devkit-qnx-armeabi
          path: build/devkits/core/
      - name: Upload telco-server
        uses: actions/upload-artifact@v3
        with:
          name: telco-server-qnx-armeabi
          path: build/telco_thin-qnx-armeabi/bin/telco-server
      - name: Upload telco-portal
        uses: actions/upload-artifact@v3
        with:
          name: telco-portal-qnx-armeabi
          path: build/telco_thin-qnx-armeabi/bin/telco-portal
      - name: Upload telco-inject
        uses: actions/upload-artifact@v3
        with:
          name: telco-inject-qnx-armeabi
          path: build/telco_thin-qnx-armeabi/bin/telco-inject
      - name: Upload telco-gadget
        uses: actions/upload-artifact@v3
        with:
          name: telco-gadget-qnx-armeabi
          path: build/telco_thin-qnx-armeabi/lib/telco/32/telco-gadget.so
      - name: Test Core
        run: |
          mkdir -p /tmp/pkg
          cd build/tmp_thin-qnx-armeabi/telco-core
          cp -a tests/telco-tests tests/labrats/ lib/agent/telco-agent.so /tmp/pkg
          tar -C /tmp/pkg -cf /tmp/runner.tar .
          /opt/sabrelite/run.sh /tmp/runner.tar /opt/telco/telco-tests
        continue-on-error: true

  toolchain-windows:
    runs-on: windows-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-windows-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Roll toolchain
        run: python releng\deps.py roll toolchain windows-x86

  sdk-windows:
    needs: toolchain-windows
    strategy:
      matrix:
        arch: [x86, x86_64]
        config: [release, debug]
      fail-fast: false
    runs-on: windows-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-windows-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Roll SDK
        run: python releng\deps.py roll sdk windows-${{ matrix.arch }}-${{ matrix.config }} --activate

  toolchain-macos:
    strategy:
      matrix:
        arch: [x86_64, arm64]
      fail-fast: false
    runs-on: macos-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-macos-env
        with:
          certificates-p12: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          certificates-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}
          keychain-password: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Roll toolchain
        run: releng/deps.py roll toolchain macos-${{ matrix.arch }}
      - name: Tear down environment
        uses: ./.github/actions/teardown-macos-env

  sdk-macos:
    needs: toolchain-macos
    strategy:
      matrix:
        arch: [x86_64, arm64, arm64e]
      fail-fast: false
    runs-on: ${{ matrix.arch == 'x86_64' && 'macos-latest' || 'macos-12-arm64' }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-macos-env
        with:
          certificates-p12: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          certificates-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}
          keychain-password: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Roll SDK
        run: releng/deps.py roll sdk macos-${{ matrix.arch }} --activate
      - name: Tear down environment
        uses: ./.github/actions/teardown-macos-env

  sdk-ios:
    needs: toolchain-macos
    strategy:
      matrix:
        arch: [arm64, arm64e, arm64eoabi, x86_64-simulator, arm64-simulator]
      fail-fast: false
    runs-on: macos-11
    env:
      XCODE11: /Applications/Xcode_11.7.app
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-macos-env
        with:
          certificates-p12: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          certificates-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Roll SDK
        run: releng/deps.py roll sdk ios-${{ matrix.arch }} --activate
      - name: Tear down environment
        uses: ./.github/actions/teardown-macos-env

  sdk-watchos:
    needs: toolchain-macos
    strategy:
      matrix:
        arch: [arm64, arm64-simulator]
      fail-fast: false
    runs-on: macos-12
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-macos-env
        with:
          certificates-p12: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          certificates-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Roll SDK
        run: releng/deps.py roll sdk watchos-${{ matrix.arch }} --activate
      - name: Tear down environment
        uses: ./.github/actions/teardown-macos-env

  sdk-tvos:
    needs: toolchain-macos
    strategy:
      matrix:
        arch: [arm64, arm64-simulator]
      fail-fast: false
    runs-on: macos-12
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-macos-env
        with:
          certificates-p12: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          certificates-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Roll SDK
        run: releng/deps.py roll sdk tvos-${{ matrix.arch }} --activate
      - name: Tear down environment
        uses: ./.github/actions/teardown-macos-env

  toolchain-linux:
    strategy:
      matrix:
        arch: [x86, x86_64, x86_64-musl, armhf, arm64, arm64-musl]
      fail-fast: false
    runs-on: ubuntu-latest
    container: ghcr.io/telco/x-tools-linux-${{ matrix.arch }}:latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-linux-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Roll toolchain
        run: releng/deps.py roll toolchain linux-${{ matrix.arch }}

  sdk-linux:
    needs: toolchain-linux
    strategy:
      matrix:
        arch: [x86, x86_64, x86_64-musl, armhf, arm64, arm64-musl, mips, mipsel, mips64, mips64el]
      fail-fast: false
    runs-on: ubuntu-latest
    container: ghcr.io/telco/x-tools-linux-${{ matrix.arch }}:latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-linux-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Set TELCO_CAN_RUN_HOST_BINARIES
        if: ${{ matrix.arch == 'x86' }}
        run: echo "TELCO_CAN_RUN_HOST_BINARIES=yes" >> $GITHUB_ENV
      - name: Configure qemu-user
        if: ${{ !startsWith(matrix.arch, 'x86') }}
        run: echo "TELCO_QEMU_SYSROOT=/opt/x-tools/$XTOOLS_HOST/$XTOOLS_HOST/sysroot" >> $GITHUB_ENV
      - name: Roll SDK
        run: releng/deps.py roll sdk linux-${{ matrix.arch }} --activate

  sdk-android-32:
    needs: toolchain-linux
    strategy:
      matrix:
        arch: [x86, arm]
      fail-fast: false
    runs-on: ubuntu-latest
    container: ghcr.io/telco/x-tools-linux-x86:latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-linux-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Set up NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ env.ANDROID_NDK_VERSION }}
          add-to-path: false
      - name: Roll SDK
        run: |
          export \
              CC_FOR_BUILD=$CC \
              CXX_FOR_BUILD=$CXX \
              AS_FOR_BUILD=$AS \
              LD_FOR_BUILD=$LD \
              AR_FOR_BUILD=$AR \
              NM_FOR_BUILD=$NM \
              RANLIB_FOR_BUILD=$RANLIB \
              STRIP_FOR_BUILD=$STRIP \
              READELF_FOR_BUILD=$READELF \
              OBJCOPY_FOR_BUILD=$OBJCOPY \
              OBJDUMP_FOR_BUILD=$OBJDUMP
          unset CC CXX AS LD AR NM RANLIB STRIP READELF OBJCOPY OBJDUMP
          releng/deps.py roll sdk android-${{ matrix.arch }} --activate
        env:
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
          TELCO_BUILD_ARCH: x86

  sdk-android-64:
    needs: toolchain-linux
    strategy:
      matrix:
        arch: [x86_64, arm64]
      fail-fast: false
    runs-on: ubuntu-latest
    container: ghcr.io/telco/x-tools-linux-x86_64:latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-linux-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Set up NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ env.ANDROID_NDK_VERSION }}
          add-to-path: false
      - name: Roll SDK
        run: |
          export \
              CC_FOR_BUILD=$CC \
              CXX_FOR_BUILD=$CXX \
              AS_FOR_BUILD=$AS \
              LD_FOR_BUILD=$LD \
              AR_FOR_BUILD=$AR \
              NM_FOR_BUILD=$NM \
              RANLIB_FOR_BUILD=$RANLIB \
              STRIP_FOR_BUILD=$STRIP \
              READELF_FOR_BUILD=$READELF \
              OBJCOPY_FOR_BUILD=$OBJCOPY \
              OBJDUMP_FOR_BUILD=$OBJDUMP
          unset CC CXX AS LD AR NM RANLIB STRIP READELF OBJCOPY OBJDUMP
          releng/deps.py roll sdk android-${{ matrix.arch }} --activate
        env:
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
